"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const prettier_standard_1 = __importDefault(require("prettier-standard"));
const handlebars_1 = __importDefault(require("handlebars"));
const _ = __importStar(require("lodash"));
const utils_1 = require("../utils");
class BaseGenerator {
    constructor(defs, templatesDir, outDir) {
        this.defs = defs;
        this.templatesDir = templatesDir;
        this.outDir = outDir;
    }
    /**
     * Always call this first
     */
    async init() {
        this.templateFiles = await utils_1.readDirs(this.templatesDir);
        await registerHelpers(handlebars_1.default, this.templatesDir);
    }
    /**
     * Call this after init
     */
    async generate() { }
    prettify(content, filepath) {
        return prettier_standard_1.default.format(content, {
            filepath,
            parser: 'typescript'
        });
    }
}
exports.BaseGenerator = BaseGenerator;
async function registerHelpers(Handlebrs, templatesDir) {
    const helpers = await utils_1.readDirs(path_1.join(templatesDir, '.helpers'));
    helpers.forEach(helperFile => {
        try {
            const helper = require(helperFile);
            helper(Handlebrs, _);
        }
        catch (e) {
            console.error('Could not load helper:', helperFile);
            console.error(e);
            process.exit(1);
        }
    });
}
exports.registerHelpers = registerHelpers;
//# sourceMappingURL=base.js.map