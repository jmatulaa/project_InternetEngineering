"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const handlebars_1 = __importDefault(require("handlebars"));
const fs_1 = require("fs");
const fs_extra_1 = __importDefault(require("fs-extra"));
const base_1 = require("./base");
class ObjectionGenerator extends base_1.BaseGenerator {
    async generate() {
        await fs_extra_1.default.ensureDir(this.outDir + '/models');
        await this.generateModels();
        await fs_extra_1.default.copy(`${this.templatesDir}/BaseModel.ts`, `${this.outDir}/models/BaseModel.ts`, {
            overwrite: false
        });
    }
    async generateModels() {
        for (const file of this.templateFiles) {
            if (file.includes('$$model$$')) {
                const hbsData = await fs_1.promises.readFile(file, 'utf8');
                const template = handlebars_1.default.compile(hbsData);
                for (const result of this.compileModel(template)) {
                    const outpath = `${this.outDir}/models/${result.modelName}.ts`;
                    await fs_1.promises.writeFile(outpath, this.prettify(result.content, outpath), 'utf8');
                }
            }
        }
    }
    *compileModel(template) {
        var _a, _b, _c, _d;
        for (const model of Object.keys(this.defs.models)) {
            const prefix = ((_b = (_a = this.defs.config) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.classNamePrefix) || '';
            const postfix = ((_d = (_c = this.defs.config) === null || _c === void 0 ? void 0 : _c.model) === null || _d === void 0 ? void 0 : _d.classNamePostfix) || '';
            const modelName = `${prefix}${model}${postfix}`;
            const modelData = this.defs.models[model];
            const templateData = {
                modelPrefix: prefix,
                modelPostfix: postfix,
                modelNofix: model,
                modelName,
                data: modelData
            };
            yield {
                modelName,
                content: template(templateData)
            };
        }
    }
}
exports.ObjectionGenerator = ObjectionGenerator;
//# sourceMappingURL=objection.js.map